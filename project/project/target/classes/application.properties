# Application Configuration
spring.application.name=ecommerce-ai-platform
server.port=8081
spring.cloud.compatibility-verifier.enabled=false

# Database Configuration
spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3306/ecommerce_db?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC}
spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:123456}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver



# JPA Configuration
#spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.hibernate.ddl-auto=update


spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.batch_size=50

# Redis Configuration - Disabled (not used)
# spring.data.redis.host=localhost
# spring.data.redis.port=6379
# spring.data.redis.timeout=60000
# spring.cache.type=redis
# AI Configuration - OpenAI
spring.ai.openai.api-key=${OPENAI_API_KEY:your-openai-api-key}
spring.ai.openai.chat.model=gpt-3.5-turbo
spring.ai.openai.embedding.model=text-embedding-ada-002

# Vector Database Configuration - Chroma (Disabled for now)
# spring.ai.vectorstore.chroma.client.host=localhost
# spring.ai.vectorstore.chroma.client.port=8000
# spring.ai.vectorstore.chroma.collection-name=ecommerce_vectors
# spring.ai.vectorstore.chroma.distance-type=COSINE

# Security Configuration
jwt.secret=${JWT_SECRET_BASE64}
jwt.expiration=${JWT_EXPIRATION:86400000}
oauth2.google.client-id=${GOOGLE_CLIENT_ID}
oauth2.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# Payment Gateway Configuration
stripe.api.key=${STRIPE_API_KEY:your-stripe-api-key}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET:your-stripe-webhook-secret}
vnpay.merchant.id=${VNPAY_MERCHANT_ID:your-vnpay-merchant-id}
vnpay.secret.key=${VNPAY_SECRET_KEY:your-vnpay-secret-key}

# Email Configuration
spring.mail.host=${SPRING_MAIL_HOST:smtp.gmail.com}
spring.mail.port=${SPRING_MAIL_PORT:587}
spring.mail.username=${SPRING_MAIL_USERNAME:kirito.05.dz@gmail.com}
spring.mail.password=${SPRING_MAIL_PASSWORD:your-mail-password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# Kafka Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:ecommerce-group}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# File Upload Configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=50MB

# Logging Configuration
logging.level.com.example.project=DEBUG
logging.level.org.springframework.ai=DEBUG
logging.level.org.springframework.security=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true

# API Documentation
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operations-sorter=method

# AI Service Configuration
ai.service.content-generation.enabled=true
ai.service.recommendation.enabled=true
ai.service.chatbot.enabled=true
ai.service.fraud-detection.enabled=true
ai.service.inventory-forecasting.enabled=true

# Recommendation System Configuration
recommendation.vector.similarity.threshold=0.8
recommendation.max.results=10
recommendation.update.interval=3600000

# Chatbot Configuration
chatbot.max.conversation.history=10
chatbot.response.timeout=30000
chatbot.personality=friendly,helpful,professional

# Inventory Management
inventory.low.stock.threshold=10
inventory.forecast.days=30
inventory.alert.enabled=true

# Performance Configuration
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# CORS Configuration - Removed (Frontend integrated with Spring Boot)

# GHN Shipping API Configuration
ghn.api.token=${GHN_API_TOKEN:9bed4ddd-64c1-11f0-8299-f6f77a32dfa4}
ghn.api.base-url=${GHN_API_BASE_URL:https://online-gateway.ghn.vn/shiip/public-api/v2}
ghn.api.mock-create-order=true
#ghn.api.mock-create-order=false


# Disable unused Spring Data modules to reduce startup warnings
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration

# Disable health checks for external services
management.health.rabbit.enabled=false
management.health.mail.enabled=false
management.health.elasticsearch.enabled=false

# Disable Thymeleaf template location check (using static resources instead)
spring.thymeleaf.check-template-location=false

# Disable JPA open-in-view warning (not needed for API-first application)
spring.jpa.open-in-view=false
